(define (domain turnandopen-strips)
 (:requirements :typing :durative-actions)
 (:types room object robot gripper door) 
 (:predicates 
    (at-robby ?r - robot ?x - room)
    (at ?o - object ?x - room)
    (free ?r - robot ?g - gripper)
    (carry ?r - robot ?o - object ?g - gripper)
    (connected ?x - room ?y - room ?d - door)
    (open ?d - door)
    (closed ?d - door)
    (doorknob-turned ?d - door ?g - gripper))

  (:durative-action turn-doorknob
       :parameters (?r - robot ?from ?to - room ?d - door ?g - gripper)
       :duration (= ?duration 3)
       :condition (and (over all (at-robby ?r ?from))
                       (at start (free ?r ?g))
                       (over all (connected ?from ?to ?d))
                       (at start (closed ?d)))
       :effect (and (at start (not (free ?r ?g)))
                    (at end (free ?r ?g))
                    (at start (doorknob-turned ?d ?g))
                    (at end (not (doorknob-turned ?d ?g)))))

  (:durative-action open-door
       :parameters (?r - robot ?from ?to - room ?d - door ?g - gripper)
       :duration (= ?duration 2)
       :condition (and (over all (at-robby ?r ?from))
                       (over all (connected ?from ?to ?d))
                       (over all (doorknob-turned ?d ?g))
                       (at start (closed ?d)))
       :effect (and (at start (not (closed ?d)))
                    (at end (open ?d))))

  (:durative-action move
       :parameters (?r - robot ?from ?to - room ?d - door)
       :duration (= ?duration 1)
       :condition (and (at start (at-robby ?r ?from))
                       (over all (connected ?from ?to ?d))
                       (at end (open ?d)))
       :effect (and (at end (at-robby ?r ?to))
                    (at start (not (at-robby ?r ?from)))))

  (:durative-action pick
       :parameters (?r - robot ?obj - object ?room - room ?g - gripper)
       :duration (= ?duration 1)
       :condition (and (at start (at ?obj ?room))
                       (at start (at-robby ?r ?room))
                       (at start (free ?r ?g)))
       :effect (and (at end (carry ?r ?obj ?g))
                    (at start (not (at ?obj ?room)))
                    (at start (not (free ?r ?g)))))

  (:durative-action drop
       :parameters (?r - robot ?obj - object ?room - room ?g - gripper)
       :duration (= ?duration 1)
       :condition (and (at start (carry ?r ?obj ?g))
                       (at start (at-robby ?r ?room)))
       :effect (and (at end (at ?obj ?room))
                    (at end (free ?r ?g))
                    (at start (not (carry ?r ?obj ?g)))))
)



(define (problem turnandopen-2-8-12)
(:domain turnandopen-strips)
(:objects robot1 robot2 - robot
rgripper1 lgripper1 rgripper2 lgripper2 - gripper
room1 room2 room3 room4 room5 room6 room7 room8 - room
door1 door2 door3 door4 door5 door6 door7 - door
ball1 ball2 ball3 ball4 ball5 ball6 ball7 ball8 ball9 ball10 ball11 ball12 - object)
(:init
(closed door1)
(closed door2)
(closed door3)
(closed door4)
(closed door5)
(closed door6)
(closed door7)
(connected room1 room2 door1)
(connected room2 room1 door1)
(connected room2 room3 door2)
(connected room3 room2 door2)
(connected room3 room4 door3)
(connected room4 room3 door3)
(connected room4 room5 door4)
(connected room5 room4 door4)
(connected room5 room6 door5)
(connected room6 room5 door5)
(connected room6 room7 door6)
(connected room7 room6 door6)
(connected room7 room8 door7)
(connected room8 room7 door7)
(at-robby robot1 room4)
(free robot1 rgripper1)
(free robot1 lgripper1)
(at-robby robot2 room2)
(free robot2 rgripper2)
(free robot2 lgripper2)
(at ball1 room4)
(at ball2 room5)
(at ball3 room7)
(at ball4 room6)
(at ball5 room4)
(at ball6 room3)
(at ball7 room6)
(at ball8 room4)
(at ball9 room6)
(at ball10 room8)
(at ball11 room8)
(at ball12 room4)
)
(:goal
(and
(at ball1 room7)
(at ball2 room4)
(at ball3 room4)
(at ball4 room6)
(at ball5 room4)
(at ball6 room3)
(at ball7 room8)
(at ball8 room8)
(at ball9 room3)
(at ball10 room5)
(at ball11 room1)
(at ball12 room8)
)
)
(:metric minimize (total-time))

)


